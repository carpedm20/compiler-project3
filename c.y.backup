%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define YYDEBUG 1
extern int yydebug;

%}

%token RETURN CONST CONSTANT EXTERN STATIC VOLATILE CONTINUE BREAK IF THEN ELSE ENDIF FOR ENDFOR WHILE ENDWHILE SIZEOF UNSIGNED SIGNED CHAR HALF INT LONG DOUBLE FLOAT VOID BOOL IDENTIFIER ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN RIGHT_ASSIGN LEFT_ASSIGN RIGHT_OP LEFT_OP PTR_OP LE_OP GE_OP EQ_OP NE_OP INC_OP DEC_OP AND_OP OR_OP EQ_OP NE_OP WS STRING_LITERAL

%token ENUMERATION_CONSTANT TYPEDEF_NAME

%start start

%union 
{
        int number;
        char *string;
}

%%

identifier
  : IDENTIFIER {
    //printf(" ===============> ID : %s\n", $1.string);
    enqueue(q, $1.string);
  }

primary_expression
  : identifier
  | constant
  | string 
  | '(' expression ')'
  ;

constant
  : CONSTANT {
    enqueue(q, $1.string);
  }
  ;

string
  : STRING_LITERAL {
    enqueue(q, $1.string);
  }
  ;

postfix_expression
  : primary_expression
  | postfix_expression '[' expression ']'
  | postfix_expression '(' ')'
  | postfix_expression '(' argument_expression_list ')'
  | postfix_expression '.' identifier
  | postfix_expression PTR_OP identifier
  | postfix_expression INC_OP
  | postfix_expression DEC_OP
  | '(' type_name ')' '{' initializer_list '}'
  | '(' type_name ')' '{' initializer_list ',' '}'
  ;

argument_expression_list
  : assignment_expression
  | argument_expression_list ',' assignment_expression
  ;

unary_expression
  : postfix_expression
  | INC_OP unary_expression
  | DEC_OP unary_expression
  | unary_operator cast_expression
  | SIZEOF unary_expression
  | SIZEOF '(' type_name ')'
  ;

unary_operator
  : '&'
  | '*'
  | '+'
  | '-'
  | '~'
  | '!'
  ;

cast_expression
  : unary_expression
  | '(' type_name ')' cast_expression
  ;

multiplicative_expression
  : cast_expression
  | multiplicative_expression '*' cast_expression
  | multiplicative_expression '/' cast_expression
  | multiplicative_expression '%' cast_expression
  ;

additive_expression
  : multiplicative_expression
  | additive_expression '+' multiplicative_expression
  | additive_expression '-' multiplicative_expression
  ;

shift_expression
  : additive_expression
  | shift_expression LEFT_OP additive_expression
  | shift_expression RIGHT_OP additive_expression
  ;

relational_expression
  : shift_expression
  | relational_expression '<' shift_expression
  | relational_expression '>' shift_expression
  | relational_expression LE_OP shift_expression
  | relational_expression GE_OP shift_expression
  ;

equality_expression
  : relational_expression
  | equality_expression EQ_OP relational_expression
  | equality_expression NE_OP relational_expression
  ;

and_expression
  : equality_expression
  | and_expression '&' equality_expression
  ;

exclusive_or_expression
  : and_expression
  | exclusive_or_expression '^' and_expression
  ;

inclusive_or_expression
  : exclusive_or_expression
  | inclusive_or_expression '|' exclusive_or_expression
  ;

logical_and_expression
  : inclusive_or_expression
  | logical_and_expression AND_OP inclusive_or_expression
  ;

logical_or_expression
  : logical_and_expression
  | logical_or_expression OR_OP logical_and_expression
  ;

conditional_expression
  : logical_or_expression
  | logical_or_expression '?' expression ':' conditional_expression
  ;

assignment_expression
  : conditional_expression
  | unary_expression assignment_operator assignment_expression
  ;

assignment_operator
  : '='
  | MUL_ASSIGN
  | DIV_ASSIGN
  | MOD_ASSIGN
  | ADD_ASSIGN
  | SUB_ASSIGN
  | LEFT_ASSIGN
  | RIGHT_ASSIGN
  | AND_ASSIGN
  | XOR_ASSIGN
  | OR_ASSIGN
  ;

expression
  : assignment_expression
  | expression ',' assignment_expression
  ;

constant_expression
  : conditional_expression  /* with constraints */
  ;

declaration
  : declaration_specifiers ';' { printf("1"); } {
    // int a;
    printf("%s  ", dequeue(q));
  }
  | declaration_specifiers init_declarator_list ';' {
    // int a = 3;
    printf("%s  ", dequeue(q));
  }
  ;

declaration_specifiers
  : storage_class_specifier declaration_specifiers
  | storage_class_specifier
  | type_specifier declaration_specifiers
  | type_specifier
  | type_qualifier declaration_specifiers
  | type_qualifier
  ;

init_declarator_list
  : init_declarator
  | init_declarator_list ',' init_declarator
  ;

init_declarator
  : declarator '=' initializer
  | declarator
  ;

storage_class_specifier
  : EXTERN { enqueue(q, "extern"); }
  | STATIC { enqueue(q, "static"); }
  ;

type_specifier
  : VOID { enqueue(q, "void"); }
  | CHAR { enqueue(q, "char"); }
  | INT { enqueue(q, "int"); }
  | LONG { enqueue(q, "long"); }
  | FLOAT { enqueue(q, "float"); }
  | DOUBLE { enqueue(q, "double"); }
  | SIGNED { enqueue(q, "signed"); }
  | UNSIGNED { enqueue(q, "unsigned"); }
  | BOOL { enqueue(q, "bool"); }
  ;

specifier_qualifier_list
  : type_specifier specifier_qualifier_list 
  | type_specifier
  | type_qualifier specifier_qualifier_list
  | type_qualifier
  ;

type_qualifier
  : CONST { enqueue(q, "const "); }
  | VOLATILE { enqueue(q, "volatile "); }
  ;

declarator
  : pointer direct_declarator
  | direct_declarator
  ;

direct_declarator
  : identifier
  | '(' declarator ')'
  | direct_declarator '[' ']'
  | direct_declarator '[' '*' ']'
  | direct_declarator '[' assignment_expression ']'
  | direct_declarator '(' parameter_type_list ')'
  | direct_declarator '(' ')'
  | direct_declarator '(' identifier_list ')'
  ;

pointer
  : '*' type_qualifier_list pointer
  | '*' type_qualifier_list
  | '*' pointer
  | '*'
  ;

type_qualifier_list
  : type_qualifier
  | type_qualifier_list type_qualifier
  ;


parameter_type_list
  : parameter_list
  ;

parameter_list
  : parameter_declaration
  | parameter_list ',' parameter_declaration
  ;

parameter_declaration
  : declaration_specifiers declarator
  | declaration_specifiers abstract_declarator
  | declaration_specifiers
  ;

identifier_list
  : identifier
  | identifier_list ',' identifier
  ;

type_name
  : specifier_qualifier_list abstract_declarator
  | specifier_qualifier_list
  ;

abstract_declarator
  : pointer direct_abstract_declarator
  | pointer
  | direct_abstract_declarator
  ;

direct_abstract_declarator
  : '(' abstract_declarator ')'
  | '[' ']'
  | '[' '*' ']'
  | '[' STATIC type_qualifier_list assignment_expression ']'
  | '[' STATIC assignment_expression ']'
  | '[' type_qualifier_list STATIC assignment_expression ']'
  | '[' type_qualifier_list assignment_expression ']'
  | '[' type_qualifier_list ']'
  | '[' assignment_expression ']'
  | direct_abstract_declarator '[' ']'
  | direct_abstract_declarator '[' '*' ']'
  | direct_abstract_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  | direct_abstract_declarator '[' STATIC assignment_expression ']'
  | direct_abstract_declarator '[' type_qualifier_list assignment_expression ']'
  | direct_abstract_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  | direct_abstract_declarator '[' type_qualifier_list ']'
  | direct_abstract_declarator '[' assignment_expression ']'
  | '(' ')'
  | '(' parameter_type_list ')'
  | direct_abstract_declarator '(' ')'
  | direct_abstract_declarator '(' parameter_type_list ')'
  ;

initializer
  : '{' initializer_list '}'
  | '{' initializer_list ',' '}'
  | assignment_expression
  ;

initializer_list
  : designation initializer
  | initializer
  | initializer_list ',' designation initializer
  | initializer_list ',' initializer
  ;

designation
  : designator_list '='
  ;

designator_list
  : designator
  | designator_list designator
  ;

designator
  : '[' constant_expression ']'
  | '.' identifier
  ;

statement
  : labeled_statement
  | compound_statement
  | expression_statement
  | selection_statement
  | iteration_statement
  | jump_statement
  ;

labeled_statement
  : identifier ':' statement
  ;

compound_statement
  : '{' '}'
  | '{'  block_item_list '}'
  ;

block_item_list
  : block_item
  | block_item_list block_item
  ;

block_item
  : declaration
  | statement
  ;

expression_statement
  : ';'
  | expression ';'
  ;

selection_statement
  : IF '(' expression ')' statement ELSE statement
  | IF '(' expression ')' statement
  ;

iteration_statement
  : WHILE '(' expression ')' statement
  | FOR '(' expression_statement expression_statement ')' statement
  | FOR '(' expression_statement expression_statement expression ')' statement
  | FOR '(' declaration expression_statement ')' statement
  | FOR '(' declaration expression_statement expression ')' statement
  ;

jump_statement
  : CONTINUE ';'
  | BREAK ';'
  | RETURN ';'
  | RETURN expression ';'
  ;

start
  : translation_unit
  ;

translation_unit
  : external_declaration {
    printf(" ==============> \n");
    printf(" Is empty : %d\n", isEmpty(q));
    while(isEmpty(q)) {

    }
  }
  | translation_unit external_declaration {
    printf(" ==============> \n");
  }
  ;

external_declaration
  : function_definition
  | declaration
  ;

function_definition
  : declaration_specifiers declarator declaration_list compound_statement
  | declaration_specifiers declarator compound_statement

declaration_list
  : declaration
  | declaration_list declaration
  ;

%%

char *scheme = "";
struct queue *q;

char * append(char * string1, char * string2)
{
    char * result = NULL;
    asprintf(&result, "%s%s", string1, string2);
    return result;
}

struct sNode
{
   char *data;
   struct sNode *next;
};

struct queue
{
   struct sNode *stack1;
   struct sNode *stack2;
};

void push(struct sNode** top_ref, char* new_data);

char *pop(struct sNode** top_ref);

void enqueue(struct queue *q, char *x)
{
   push(&q->stack1, x);
}

char* dequeue(struct queue *q)
{
   char* x;

  
   if(q->stack1 == NULL && q->stack2 == NULL)
   {
      getchar();
      exit(0);
   }

   /* Move elements from satck1 to stack 2 only if
       stack2 is empty */
   if(q->stack2 == NULL)
   {
     while(q->stack1 != NULL)
     {
        x = pop(&q->stack1);
        push(&q->stack2, x);
     }
   }

   x = pop(&q->stack2);
   return x;
}

void push(struct sNode** top_ref, char* new_data)
{
 
  struct sNode* new_node =
            (struct sNode*) malloc(sizeof(struct sNode));

  if(new_node == NULL)
  {
     getchar();
     exit(0);
  }

 
  new_node->data  = new_data;

 
  new_node->next = (*top_ref);

 
  (*top_ref)    = new_node;
}

char* pop(struct sNode** top_ref)
{
  char* res;
  struct sNode *top;

 
  if(*top_ref == NULL)
  {
     getchar();
     exit(0);
  }
  else
  {
     top = *top_ref;
     res = top->data;
     *top_ref = top->next;
     free(top);
     return res;
  }
}

bool isEmpty(struct queue *q) {
  if (q->stack1 == q->stack2)
    return true;
  else
    return false;
}

main() {
    yydebug=1;
    q = (struct queue*)malloc(sizeof(struct queue));
    q->stack1 = NULL;
    q->stack2 = NULL;

    yyparse();
    return 0;
}
